import os
import time
from flask import Flask, request, jsonify, Response
from groq import Groq
from dotenv import load_dotenv
from flask_cors import CORS
import logging
from datetime import datetime
import json
from typing import List, Dict, Generator

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Initialize Flask app with CORS
app = Flask(__name__)
CORS(app, resources={r"/api/*": {"origins": "*"}})

# Rate limiting configuration
RATE_LIMIT_WINDOW = 1  # seconds
last_request_time = 0

class ChatbotException(Exception):
    """Custom exception for chatbot errors"""
    pass

def initialize_groq_client() -> Groq:
    """Initialize and return the Groq client with error handling"""
    try:
        GROQ_API_KEY = os.getenv("GROQ_API_KEY")
        if not GROQ_API_KEY:
            raise ValueError("GROQ_API_KEY environment variable is missing")
        return Groq(api_key=GROQ_API_KEY)
    except Exception as e:
        logger.error(f"Failed to initialize Groq client: {str(e)}")
        raise ChatbotException("Failed to initialize AI service")

try:
    client = initialize_groq_client()
except ChatbotException:
    # This will cause the app to fail fast if initialization fails
    raise

# System prompts with improved formatting instructions
SYSTEM_PROMPTS = {
    "en": (
        "You are KrishiBot, an expert AI agricultural assistant for Indian farmers. Follow these guidelines:\n\n"
        "**Response Format Rules**\n"
        "1. Always begin with **Bold Title** (HH:MM)\n"
        "2. Use ## Section Headers with relevant emojis\n"
        "3. Present information in clear, organized sections\n"
        "4. Use bullet points (- ‚ú®) for key information\n"
        "5. Include practical examples from Indian agriculture\n"
        "6. Provide regional considerations when relevant\n"
        "7. Use simple, clear language suitable for farmers\n\n"
        "**Content Guidelines**\n"
        "- Always explain concepts clearly before giving recommendations\n"
        "- Provide multiple solutions when available (organic/chemical)\n"
        "- Include implementation tips and precautions\n"
        "- Mention government schemes when relevant\n"
        "- Add 'Did You Know?' facts when appropriate\n\n"
        "**Example Response**\n\n"
        "**Cotton Cultivation Best Practices** (14:30)\n\n"
        "## üå± Ideal Growing Conditions\n"
        "- ‚ú® Soil: Well-drained black cotton soil (pH 6-7)\n"
        "- ‚ú® Temperature: 21-30¬∞C (optimal for growth)\n"
        "- ‚ú® Rainfall: 50-100cm annually (drought-resistant varieties available)\n\n"
        "## üöú Planting Recommendations\n"
        "- ‚ú® Spacing: 90cm between rows, 60cm between plants\n"
        "- ‚ú® Seed rate: 15-20kg/ha for hybrids\n"
        "- ‚ú® Best time: June-July for kharif season\n\n"
        "üí° **Pro Tip**: In Maharashtra, variety NH-615 performs well in rainfed conditions with 20% higher yield than traditional varieties."
    ),
    "hi": (
        "‡§Ü‡§™ ‡§ï‡•É‡§∑‡§ø ‡§¨‡•â‡§ü ‡§π‡•à‡§Ç, ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§æ‡§Ø‡§ï‡•§ ‡§á‡§® ‡§¶‡§ø‡§∂‡§æ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç:\n\n"
        "**‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™ ‡§®‡§ø‡§Ø‡§Æ**\n"
        "1. ‡§π‡§Æ‡•á‡§∂‡§æ **‡§¨‡•ã‡§≤‡•ç‡§° ‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï** (HH:MM) ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç\n"
        "2. ## ‡§Ö‡§®‡•Å‡§≠‡§æ‡§ó ‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï ‡§î‡§∞ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§á‡§Æ‡•ã‡§ú‡•Ä ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n"
        "3. ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•ã ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü, ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§ø‡§§ ‡§Ö‡§®‡•Å‡§≠‡§æ‡§ó‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§∏‡•ç‡§§‡•Å‡§§ ‡§ï‡§∞‡•á‡§Ç\n"
        "4. ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•Å‡§≤‡•á‡§ü ‡§™‡•â‡§á‡§Ç‡§ü (- ‚ú®) ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n"
        "5. ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§∏‡•á ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç\n"
        "6. ‡§™‡•ç‡§∞‡§æ‡§∏‡§Ç‡§ó‡§ø‡§ï ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•Ä‡§Ø ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç\n"
        "7. ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∏‡§∞‡§≤, ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n\n"
        "**‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§¶‡§ø‡§∂‡§æ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂**\n"
        "- ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§¶‡•á‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§æ‡§è‡§Ç\n"
        "- ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§ï‡§à ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç (‡§ú‡•à‡§µ‡§ø‡§ï/‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï)\n"
        "- ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§®‡•ç‡§µ‡§Ø‡§® ‡§Ø‡•Å‡§ï‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç\n"
        "- ‡§™‡•ç‡§∞‡§æ‡§∏‡§Ç‡§ó‡§ø‡§ï ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§â‡§≤‡•ç‡§≤‡•á‡§ñ ‡§ï‡§∞‡•á‡§Ç\n"
        "- ‡§â‡§ö‡§ø‡§§ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ '‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ú‡§æ‡§®‡§§‡•á ‡§π‡•à‡§Ç?' ‡§§‡§•‡•ç‡§Ø ‡§ú‡•ã‡§°‡§º‡•á‡§Ç\n\n"
        "**‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ**\n\n"
        "**‡§ï‡§™‡§æ‡§∏ ‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•Ä ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§™‡•ç‡§∞‡§•‡§æ‡§è‡§Ç** (14:30)\n\n"
        "## üå± ‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§â‡§ó‡§æ‡§®‡•á ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Å\n"
        "- ‚ú® ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä: ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§µ‡§æ‡§≤‡•Ä ‡§ï‡§æ‡§≤‡•Ä ‡§ï‡§™‡§æ‡§∏ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä (pH 6-7)\n"
        "- ‚ú® ‡§§‡§æ‡§™‡§Æ‡§æ‡§®: 21-30¬∞C (‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ)\n"
        "- ‚ú® ‡§µ‡§∞‡•ç‡§∑‡§æ: ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï 50-100 ‡§∏‡•á‡§Æ‡•Ä (‡§∏‡•Ç‡§ñ‡§æ-‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡•ã‡§ß‡•Ä ‡§ï‡§ø‡§∏‡•ç‡§Æ‡•á‡§Ç ‡§â‡§™‡§≤‡§¨‡•ç‡§ß)\n\n"
        "## üöú ‡§∞‡•ã‡§™‡§£ ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç\n"
        "- ‚ú® ‡§¶‡•Ç‡§∞‡•Ä: ‡§™‡§Ç‡§ï‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡•Ä‡§ö 90 ‡§∏‡•á‡§Æ‡•Ä, ‡§™‡•å‡§ß‡•ã‡§Ç ‡§ï‡•á ‡§¨‡•Ä‡§ö 60 ‡§∏‡•á‡§Æ‡•Ä\n"
        "- ‚ú® ‡§¨‡•Ä‡§ú ‡§¶‡§∞: ‡§∏‡§Ç‡§ï‡§∞ ‡§ï‡§ø‡§∏‡•ç‡§Æ‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è 15-20 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞\n"
        "- ‚ú® ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§∏‡§Æ‡§Ø: ‡§ñ‡§∞‡•Ä‡§´ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡•Ç‡§®-‡§ú‡•Å‡§≤‡§æ‡§à\n\n"
        "üí° **‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡§≤‡§æ‡§π**: ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞ ‡§Æ‡•á‡§Ç, ‡§è‡§®‡§è‡§ö-615 ‡§ï‡§ø‡§∏‡•ç‡§Æ ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§ï‡§ø‡§∏‡•ç‡§Æ‡•ã‡§Ç ‡§ï‡•Ä ‡§§‡•Å‡§≤‡§®‡§æ ‡§Æ‡•á‡§Ç 20% ‡§Ö‡§ß‡§ø‡§ï ‡§â‡§™‡§ú ‡§¶‡•á‡§§‡•Ä ‡§π‡•à‡•§"
    )
}
def validate_chat_request(data: dict) -> tuple:
    """Validate incoming chat request data"""
    if not data:
        return False, "Request data is empty"
    
    message = data.get('message', '').strip()
    if not message:
        return False, "Message cannot be empty"
    
    language = data.get('language', 'en')
    if language not in SYSTEM_PROMPTS:
        return False, "Unsupported language"
    
    return True, ""

def simulate_typing(text: str, chunk_size: int = 5) -> Generator[str, None, None]:
    """Generate text chunks for typing simulation"""
    words = text.split(' ')
    current_chunk = []
    
    for word in words:
        current_chunk.append(word)
        if len(current_chunk) >= chunk_size:
            yield ' '.join(current_chunk)
            current_chunk = []
            time.sleep(0.05)  # Natural typing speed
    
    if current_chunk:
        yield ' '.join(current_chunk)

from datetime import datetime

def get_section_emoji(header: str, language: str) -> str:
    # Dummy emoji map ‚Äî customize as needed
    emoji_map = {
        "Crop Insurance Schemes": "üåæ",
        "Soil Health Schemes": "üåø",
        "Irrigation Schemes": "üíß",
        "Credit and Subsidy Schemes": "üí∏",
        "Market Access Schemes": "üìà",
        "Organic and Sustainable Farming Schemes": "üå±"
    }
    return emoji_map.get(header.strip(), "üìù")

def enforce_response_format(text: str, language: str) -> str:
    current_time = datetime.now().strftime("%H:%M")

    lines = text.strip().splitlines()
    
    # Handle title
    title_line = lines[0].strip()
    if not title_line.startswith("**"):
        title_line = f"**{title_line}** ({current_time})"
    elif not title_line.endswith(")") and "(" not in title_line:
        title_line = title_line.rstrip("*") + f"** ({current_time})"
    
    lines[0] = title_line
    text = "\n".join(lines)
    
    sections = text.split('\n\n')
    formatted_sections = []

    for section in sections:
        section = section.strip()
        if not section:
            continue

        # Headings
        if section.startswith("##"):
            header_text = section.replace("##", "").strip()
            emoji = get_section_emoji(header_text, language)
            formatted_sections.append(f"## {emoji} {header_text}")
            continue

        # Tips
        if section.startswith("Tip:") or section.startswith("Additional Tip:"):
            tip_label = "üí° Pro Tip" if language == "en" else "üí° ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡§≤‡§æ‡§π"
            formatted_sections.append(section.replace("Tip:", f"{tip_label}:").replace("Additional Tip:", f"{tip_label}:"))
            continue

        # Bullet points
        lines = section.split('\n')
        bullet_lines = []
        for line in lines:
            line = line.strip()
            if line.startswith("-"):
                # Remove extra stars or hashtags
                content = line.lstrip("-*#").strip()
                if not content.startswith("‚ú®"):
                    content = "‚ú®  " + content
                bullet_lines.append(f"- {content}")
            else:
                bullet_lines.append(line)
        formatted_sections.append("\n".join(bullet_lines))

    # Add dividers between sections
    final_output = []
    for i, sec in enumerate(formatted_sections):
        final_output.append(sec)
        if i < len(formatted_sections) - 1:
            next_section = formatted_sections[i + 1]
            if next_section.startswith("##") or "Pro Tip" in next_section:
                final_output.append("---")

    return "\n\n".join(final_output)


def get_section_emoji(title: str, language: str) -> str:
    """Returns appropriate emoji for section title"""
    title = title.lower()
    emoji_map = {
        "en": {
            "pest": "üêõ",
            "organic": "üåø",
            "management": "üîÑ",
            "control": "üõ°Ô∏è",
            "natural": "ü¶ã",
            "chemical": "‚ö†Ô∏è",
            "monitor": "üîç",
            "regional": "üìç"
        },
        "hi": {
            "‡§ï‡•Ä‡§ü": "üêõ",
            "‡§ú‡•à‡§µ‡§ø‡§ï": "üåø",
            "‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®": "üîÑ",
            "‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£": "üõ°Ô∏è",
            "‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï": "ü¶ã",
            "‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï": "‚ö†Ô∏è",
            "‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä": "üîç",
            "‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•Ä‡§Ø": "üìç"
        }
    }
    
    for keyword, emoji in emoji_map.get(language, {}).items():
        if keyword in title:
            return emoji
    return "‚ÑπÔ∏è"

def get_ai_response(messages: List[Dict[str, str]], language: str = "en") -> str:
    """Get formatted response from Groq API"""
    try:
        messages_with_system = [
            {"role": "system", "content": SYSTEM_PROMPTS[language]},
            *messages[-6:]  # Maintain conversation context
        ]
        
        response = client.chat.completions.create(
            messages=messages_with_system,
            model="llama3-70b-8192",
            temperature=0.4,
            max_tokens=1024,
            top_p=0.9,
            stream=False  # We handle streaming ourselves
        )
        
        formatted_response = enforce_response_format(
            response.choices[0].message.content,
            language
        )
        return formatted_response
    
    except Exception as e:
        logger.error(f"AI API Error: {str(e)}")
        raise ChatbotException("Failed to generate response")

@app.route('/api/chat', methods=['POST'])
def chat_handler():
    """Handle chat requests with streaming response"""
    global last_request_time
    
    try:
        # Rate limiting check
        current_time = time.time()
        if current_time - last_request_time < RATE_LIMIT_WINDOW:
            return jsonify({
                "error": "Please wait a moment before sending another message"
            }), 429
        last_request_time = current_time
        
        # Validate request
        data = request.get_json()
        is_valid, error_msg = validate_chat_request(data)
        if not is_valid:
            return jsonify({"error": error_msg}), 400
        
        message = data['message'].strip()
        language = data.get('language', 'en')
        history = data.get('history', [])
        
        # Prepare conversation context
        valid_messages = [
            msg for msg in history[-6:] 
            if isinstance(msg, dict) and msg.get("role") and msg.get("content")
        ]
        valid_messages.append({"role": "user", "content": message})
        
        # Get AI response
        full_response = get_ai_response(valid_messages, language)
        
        # Create streaming response
        def generate_stream():
            try:
                for chunk in simulate_typing(full_response):
                    yield f"data: {json.dumps({'chunk': chunk})}\n\n"
                yield "data: {}\n\n"  # End of stream marker
            except Exception as e:
                logger.error(f"Streaming error: {str(e)}")
                yield f"data: {json.dumps({'error': 'Streaming failed'})}\n\n"
        
        return Response(
            generate_stream(),
            mimetype="text/event-stream",
            headers={
                "Cache-Control": "no-cache",
                "Connection": "keep-alive"
            }
        )
        
    except ChatbotException as e:
        logger.error(f"Chatbot error: {str(e)}")
        error_msg = (
            "Sorry, I'm having technical issues. Please try again later."
            if data.get('language', 'en') == 'en' else
            "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
        )
        return jsonify({"error": error_msg}), 500
        
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """Simple health check endpoint"""
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(
        host="0.0.0.0",
        port=port,
        debug=os.environ.get("FLASK_DEBUG", "false").lower() == "true"
    )